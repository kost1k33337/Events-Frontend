// components/ProfileScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  ScrollView,
  TouchableOpacity,
  TextInput,
} from 'react-native';

import CreateEvent from './CreateEvent';

export default function ProfileScreen() {
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userName, setUserName] = useState('–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤');
  const [userEmail, setUserEmail] = useState('ivan.ivanov@example.com');

  // –ò–Ω—Ç–µ—Ä–µ—Å—ã
  const allInterests = [
    '—Å–ø–æ—Ä—Ç',
    '–∫—É–ª–∏–Ω–∞—Ä–∏—è',
    '–π–æ–≥–∞',
    '–∫–∏–Ω–æ',
    '—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ',
    '–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã',
    '–º—É–∑—ã–∫–∞',
    '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  ];
  const [selectedInterests, setSelectedInterests] = useState([
    '—Å–ø–æ—Ä—Ç',
    '–∫–∏–Ω–æ',
  ]);
  const toggleInterest = (tag) => {
    setSelectedInterests((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]
    );
  };

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–±–µ–π–¥–∂–∏)
  const achievements = [
    { id: 'a1', label: 'üéñ –ü–µ—Ä–≤—ã–π –∏–≤–µ–Ω—Ç' },
    { id: 'a2', label: 'üèÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä+' },
    { id: 'a3', label: 'üöÄ –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫' },
  ];

  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  // –ú–æ–∂–Ω–æ –ø–æ—Ç–æ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
  const [attendedCount, setAttendedCount] = useState(12);
  const [organizedCount, setOrganizedCount] = useState(24);

  const [isCreating, setIsCreating] = useState(false);
  const handleNewEvent = (newEvent) => {
    console.log('–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:', newEvent);
    setIsCreating(false);
    alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
    // –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å organisedCount –∑–¥–µ—Å—å:
    setOrganizedCount((prev) => prev + 1);
  };

  const handleLogout = () => {
    alert('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è');
    // –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
  };

  return (
    <View style={{ flex: 1 }}>
      <ScrollView contentContainerStyle={styles.container}>
        {/* –ê–≤–∞—Ç–∞—Ä */}
        <Image
          source={{ uri: 'https://avatars.githubusercontent.com/u/583231?v=4' }}
          style={styles.avatar}
        />

        {/* –ò–º—è */}
        <View style={styles.fieldContainer}>
          <Text style={styles.fieldLabel}>–ò–º—è:</Text>
          <TextInput
            style={styles.input}
            value={userName}
            onChangeText={setUserName}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            placeholderTextColor="#999"
          />
        </View>

        {/* Email */}
        <View style={styles.fieldContainer}>
          <Text style={styles.fieldLabel}>Email:</Text>
          <TextInput
            style={styles.input}
            value={userEmail}
            onChangeText={setUserEmail}
            placeholder="–í–≤–µ–¥–∏—Ç–µ email"
            placeholderTextColor="#999"
            keyboardType="email-address"
          />
        </View>

        {/* –ò–Ω—Ç–µ—Ä–µ—Å—ã */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</Text>
          <View style={styles.tagsRow}>
            {allInterests.map((tag) => {
              const isSelected = selectedInterests.includes(tag);
              return (
                <TouchableOpacity
                  key={tag}
                  onPress={() => toggleInterest(tag)}
                  style={[
                    styles.tagPill,
                    isSelected && styles.tagPillSelected,
                  ]}
                  activeOpacity={0.7}
                >
                  <Text
                    style={[
                      styles.tagText,
                      isSelected && styles.tagTextSelected,
                    ]}
                  >
                    {tag}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </View>
        </View>

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
          <View style={styles.achievementsRow}>
            {achievements.map((ach) => (
              <View key={ach.id} style={styles.achievementPill}>
                <Text style={styles.achievementText}>{ach.label}</Text>
              </View>
            ))}
          </View>
        </View>

        {/* –°—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π */}
        <View style={styles.countersContainer}>
          <View style={styles.counterBlock}>
            <Text style={styles.counterNumber}>{attendedCount}</Text>
            <Text style={styles.counterLabel}>–Ø –ø–æ—Å–µ—Ç–∏–ª</Text>
          </View>
          <View style={styles.counterBlock}>
            <Text style={styles.counterNumber}>{organizedCount}</Text>
            <Text style={styles.counterLabel}>–Ø –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª</Text>
          </View>
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ ‚Äú–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ‚Äù */}
        <TouchableOpacity
          style={styles.createEventBtn}
          onPress={() => setIsCreating(true)}
          activeOpacity={0.7}
        >
          <Text style={styles.createEventBtnText}>
            –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          </Text>
        </TouchableOpacity>

        {/* –ö–Ω–æ–ø–∫–∞ ‚Äú–í—ã–π—Ç–∏‚Äù */}
        <TouchableOpacity
          style={styles.logoutBtn}
          onPress={handleLogout}
          activeOpacity={0.7}
        >
          <Text style={styles.logoutBtnText}>–í—ã–π—Ç–∏</Text>
        </TouchableOpacity>

        {/* –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */}
        <View style={{ height: 40 }} />
      </ScrollView>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ CreateEvent */}
      {isCreating && (
        <CreateEvent onSubmit={handleNewEvent} onCancel={() => setIsCreating(false)} />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    paddingVertical: 30,
    backgroundColor: '#fff',
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 20,
  },
  fieldContainer: {
    width: '90%',
    marginBottom: 20,
  },
  fieldLabel: {
    fontSize: 14,
    color: '#555',
    marginBottom: 6,
  },
  input: {
    height: 44,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#CCC',
    paddingHorizontal: 12,
    fontSize: 16,
    backgroundColor: '#FAFAFA',
    color: '#333',
  },
  section: {
    width: '90%',
    marginTop: 10,
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '500',
    color: '#555',
    marginBottom: 12,
  },
  tagsRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  tagPill: {
    borderWidth: 1,
    borderColor: '#CCC',
    borderRadius: 12,
    paddingHorizontal: 10,
    paddingVertical: 6,
    marginRight: 8,
    marginBottom: 8,
    backgroundColor: '#FFF',
  },
  tagPillSelected: {
    backgroundColor: '#0066CC',
    borderColor: '#005BB5',
  },
  tagText: {
    fontSize: 14,
    color: '#333',
  },
  tagTextSelected: {
    color: '#FFF',
  },

  /* ===== –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ===== */
  achievementsRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  achievementPill: {
    backgroundColor: '#F0F8FF',
    borderRadius: 16,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    marginBottom: 8,
  },
  achievementText: {
    fontSize: 14,
    color: '#333',
  },

  /* ===== –°—á–µ—Ç—á–∏–∫–∏ ===== */
  countersContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '90%',
    marginBottom: 24,
    paddingVertical: 12,
    backgroundColor: '#FAFAFA',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#EEE',
  },
  counterBlock: {
    alignItems: 'center',
    flex: 1,
  },
  counterNumber: {
    fontSize: 24,
    fontWeight: '600',
    color: '#333',
  },
  counterLabel: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },

  /* ===== –ö–Ω–æ–ø–∫–∞ ‚Äú–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ‚Äù ===== */
  createEventBtn: {
    width: '90%',
    height: 48,
    borderRadius: 8,
    backgroundColor: '#28A745',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 4 },
    shadowRadius: 6,
    elevation: 4,
    marginBottom: 20,
  },
  createEventBtnText: {
    fontSize: 16,
    color: '#FFF',
    fontWeight: '600',
  },

  /* ===== –ö–Ω–æ–ø–∫–∞ ‚Äú–í—ã–π—Ç–∏‚Äù ===== */
  logoutBtn: {
    width: '90%',
    height: 44,
    borderRadius: 8,
    backgroundColor: '#E53935',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 3,
    marginBottom: 20,
  },
  logoutBtnText: {
    fontSize: 16,
    color: '#FFF',
    fontWeight: '600',
  },
});
